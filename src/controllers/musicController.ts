import { MoodAnalysisResponse } from '../services/groqService';
import * as spotifyService from '../services/spotifyService';
import { analyzeText } from './moodController';

// Interface for music recommendations from text
export interface MusicRecommendationsFromTextParams {
  text: string;
  userId: string;
  includeGenres?: string[];
  excludeGenres?: string[];
  generatePlaylist?: boolean;
  playlistName?: string;
  playlistDescription?: string;
  trackCount?: number;
}

// Interface for music recommendations response
export interface MusicRecommendationsFromTextResponse {
  success: boolean;
  moodAnalysis: MoodAnalysisResponse;
  tracks: any[];
  playlist?: any;
}

/**
 * Get music recommendations based on text input
 * This combines mood analysis with Spotify recommendations
 */
export async function getMusicRecommendationsFromText(
  params: MusicRecommendationsFromTextParams
): Promise<MusicRecommendationsFromTextResponse> {
  try {
    const startTime = Date.now();
    console.log(`Processing music recommendation request for text (${params.text.length} characters)`);
    
    // Step 1: Analyze the text for mood
    console.time('mood-analysis-step');
    const moodAnalysis = await analyzeText(params.text);
    console.timeEnd('mood-analysis-step');
    
    // Step 2: Get music recommendations from Spotify based on mood
    console.time('recommendation-generation');
    let tracks: any[] = [];
    let playlist: any = null;
    
    if (params.generatePlaylist) {
      // Create a playlist with the recommendations
      const result = await spotifyService.generateMoodPlaylist(
        params.userId,
        {
          mood: moodAnalysis.mood,
          energy: moodAnalysis.energy,
          valence: moodAnalysis.valence,
          danceability: moodAnalysis.danceability,
          genres: [...(params.includeGenres || []), ...moodAnalysis.genres].filter(
            genre => !(params.excludeGenres || []).includes(genre)
          )
        },
        {
          name: params.playlistName || `${moodAnalysis.mood} Mood`,
          description: params.playlistDescription || `Generated by Cadencia based on mood analysis of your text`,
          trackCount: params.trackCount || 20
        }
      );
      
      tracks = result.tracks;
      playlist = result.playlist;
    } else {
      // Just get recommendations without creating a playlist
      tracks = await spotifyService.getRecommendations(
        params.userId,
        {
          seed_genres: [...(params.includeGenres || []), ...moodAnalysis.genres].filter(
            genre => !(params.excludeGenres || []).includes(genre)
          ).slice(0, 5),
          target_energy: moodAnalysis.energy,
          target_valence: moodAnalysis.valence,
          target_danceability: moodAnalysis.danceability,
          limit: params.trackCount || 20
        }
      );
    }
    console.timeEnd('recommendation-generation');
    
    // Track timing for entire process
    console.timeEnd('full-recommendation-flow');
    const totalTime = Date.now() - startTime;
    console.log(`Music recommendations generated in ${totalTime}ms`);
    
    // Return the combined results
    return {
      success: true,
      moodAnalysis,
      tracks,
      ...(playlist && { playlist })
    };
  } catch (error) {
    console.error('Error generating music recommendations from text:', error);
    throw new Error(`Music recommendation error: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

/**
 * Get music recommendations based on direct mood parameters
 * This skips the text analysis step
 */
export async function getMusicRecommendationsFromMood(
  userId: string,
  moodParams: {
    mood: string;
    energy: number;
    valence: number;
    danceability: number;
    genres?: string[];
  },
  options: {
    generatePlaylist?: boolean;
    playlistName?: string;
    playlistDescription?: string;
    trackCount?: number;
  } = {}
): Promise<any> {
  try {
    console.time('spotify-recommendations');
    
    let tracks: any[] = [];
    let playlist: any = null;
    
    if (options.generatePlaylist) {
      // Create a playlist with the recommendations
      const result = await spotifyService.generateMoodPlaylist(
        userId,
        {
          mood: moodParams.mood,
          energy: moodParams.energy,
          valence: moodParams.valence,
          danceability: moodParams.danceability,
          genres: moodParams.genres || []
        },
        {
          name: options.playlistName,
          description: options.playlistDescription,
          trackCount: options.trackCount
        }
      );
      
      tracks = result.tracks;
      playlist = result.playlist;
    } else {
      // Just get recommendations without creating a playlist
      tracks = await spotifyService.getRecommendations(
        userId,
        {
          seed_genres: moodParams.genres || [],
          target_energy: moodParams.energy,
          target_valence: moodParams.valence,
          target_danceability: moodParams.danceability,
          limit: options.trackCount || 20
        }
      );
    }
    
    console.timeEnd('spotify-recommendations');
    
    return {
      success: true,
      tracks,
      ...(playlist && { playlist })
    };
  } catch (error) {
    console.error('Error generating music recommendations from mood:', error);
    throw new Error(`Music recommendation error: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
} 